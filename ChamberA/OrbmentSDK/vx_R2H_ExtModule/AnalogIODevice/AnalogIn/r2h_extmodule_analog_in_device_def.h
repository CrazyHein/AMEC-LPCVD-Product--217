/*
 * r2h_extmodule_analog_in_device_def.h
 *
 *  Created on: 2018-6-22
 *      Author: CrazyHein
 */

#ifndef R2H_EXTMODULE_ANALOG_IN_DEVICE_DEF_H_
#define R2H_EXTMODULE_ANALOG_IN_DEVICE_DEF_H_

#include "../../r2h_extmodule_data_type.h"

#pragma pack(2)
#define R2H_AD_DEVICE_BIT_SIZE										(16)
#define R2H_AD_DEVICE_MAX_NUM_OF_CHANNEL							(8)
#define R2H_AD_DEVICE_MAX_NUM_OF_INTERRUPT							(16)

typedef enum R2H_AD_DEVICE_TYPE
{
	R2H_AD_DEVICE_VOLTAGE_IN		= 0x01,
	R2H_AD_DEVICE_CURRENT_IN		= 0x02,
	R2H_AD_DEVICE_MIX_SIGNAL_IN		= 0x03,
	
	__R2H_AD_DEVICE_TYPE			= 0xFFFFFFFF
}R2H_AD_DEVICE_TYPE_T;


typedef enum R2H_AD_CHANNEL_FUNCTION_SWITCH
{
	R2H_AD_CHANNEL_FUNCTION_ENABLE 					= 0,
	R2H_AD_CHANNEL_FUNCTION_DISABLE 				= 1,
	
	__R2H_AD_CHANNEL_FUNCTION_SWITCH				= 0xFFFFFFFF
}R2H_AD_CHANNEL_FUNCTION_SWITCH_T;

typedef enum R2H_AD_DEVICE_INTERRPUT_FACTOR_DETECTION
{
	R2H_AD_DEVICE_INTERRPUT_FACTOR_OFF 				= 0,
	R2H_AD_DEVICE_INTERRPUT_FACTOR_ON  				= 1,
	
	__R2H_AD_DEVICE_INTERRPUT_FACTOR_DETECTION		= 0xFFFFFFFF
}R2H_AD_DEVICE_INTERRPUT_FACTOR_DETECTION_T;

typedef enum R2H_AD_DEVICE_INTERRPUT_FACTOR_MASK
{
	R2H_AD_DEVICE_INTERRUPT_FACTOR_UNUSED 		= 0,
	R2H_AD_DEVICE_INTERRUPT_FACTOR_USED 		= 1,
	
	__R2H_AD_DEVICE_INTERRPUT_FACTOR_MASK		= 0xFFFFFFFF
}R2H_AD_DEVICE_INTERRPUT_FACTOR_MASK_T;

typedef enum R2H_AD_DEVICE_INTERRPUT_FACTOR_RESET
{
	R2H_AD_DEVICE_INTERRUPT_FACTOR_NO_RST_RSQ 		= 0,
	R2H_AD_DEVICE_INTERRUPT_FACTOR_RST_RSQ 			= 1,
	
	__R2H_AD_DEVICE_INTERRPUT_FACTOR_RESET			= 0xFFFFFFFF
}R2H_AD_DEVICE_INTERRPUT_FACTOR_RESET_T;

typedef enum R2H_AD_DEVICE_INTERRPUT_FACTOR_GENERATION
{
	R2H_AD_DEVICE_INTERRUPT_FACTOR_RESEND 			= 0,
	R2H_AD_DEVICE_INTERRUPT_FACTOR_NO_RESEND 		= 1,
	
	__R2H_AD_DEVICE_INTERRPUT_FACTOR_GENERATION		= 0xFFFFFFFF
}R2H_AD_DEVICE_INTERRPUT_FACTOR_GENERATION_T;

typedef enum R2H_AD_DEVICE_INTERRPUT_FACTOR_SOURCE
{
	R2H_AD_DEVICE_INTERRPUT_FACTOR_DISABLE			= 0,
	R2H_AD_DEVICE_INTERRPUT_FACTOR_ERR_FLAG			= 1,
	R2H_AD_DEVICE_INTERRPUT_FACTOR_PV_ALM			= 2,
	R2H_AD_DEVICE_INTERRPUT_FACTOR_RATE_ALM			= 3,
	R2H_AD_DEVICE_INTERRPUT_FACTOR_SIGNAL_ERR		= 4,
	R2H_AD_DEVICE_INTERRPUT_FACTOR_CONV_OK			= 5,
	R2H_AD_DEVICE_INTERRPUT_FACTOR_LOG_HOLD			= 6,
	R2H_AD_DEVICE_INTERRPUT_FACTOR_LOG_READ			= 7,
	
	__R2H_AD_DEVICE_INTERRPUT_FACTOR_SOURCE			= 0xFFFFFFFF
}R2H_AD_DEVICE_INTERRPUT_FACTOR_SOURCE_T;

typedef enum R2H_AD_DEVICE_INTERRPUT_FACTOR_SCOPE
{
	R2H_AD_DEVICE_INTERRUPT_FACTOR_ALL_CHANNELS 	= 0,
	R2H_AD_DEVICE_INTERRUPT_FACTOR_CH0 				= 1,
	R2H_AD_DEVICE_INTERRUPT_FACTOR_CH1 				= 2,
	R2H_AD_DEVICE_INTERRUPT_FACTOR_CH2 				= 3,
	R2H_AD_DEVICE_INTERRUPT_FACTOR_CH3 				= 4,
	R2H_AD_DEVICE_INTERRUPT_FACTOR_CH4 				= 5,
	R2H_AD_DEVICE_INTERRUPT_FACTOR_CH5 				= 6,
	R2H_AD_DEVICE_INTERRUPT_FACTOR_CH6 				= 7,
	R2H_AD_DEVICE_INTERRUPT_FACTOR_CH7 				= 8,
	
	__R2H_AD_DEVICE_INTERRPUT_FACTOR_SCOPE			= 0xFFFFFFFF
}R2H_AD_DEVICE_INTERRPUT_FACTOR_SCOPE_T;

typedef enum R2H_AD_CHANNEL_DIFF_CONV_TRIGGER
{
	R2H_AD_CHANNEL_DIFF_CONV_NO_RSQ					= 0,
	R2H_AD_CHANNEL_DIFF_CONV_RSQ					= 1,
	
	__R2H_AD_CHANNEL_DIFF_CONV_TRIGGER				= 0xFFFFFFFF
}R2H_AD_CHANNEL_DIFF_CONV_TRIGGER_T;

typedef enum R2H_AD_CHANNEL_DIFF_CONV_STATUS
{
	R2H_AD_CHANNEL_DIFF_CONV_NOT_CONVERTED			= 0,
	R2H_AD_CHANNEL_DIFF_CONV_CONVERTED				= 1,
	
	__R2H_AD_CHANNEL_DIFF_CONV_STATUS				= 0xFFFFFFFF
}R2H_AD_CHANNEL_DIFF_CONV_STATUS_T;

typedef enum R2H_AD_CHANNEL_LOGGING_HOLD_STATUS
{
	R2H_AD_CHANNEL_LOGGING_DATA_ONGOING				= 0,
	R2H_AD_CHANNEL_LOGGING_DATA_HOLDING				= 1,
	
	__R2H_AD_CHANNEL_LOGGING_HOLD_STATUS			= 0xFFFFFFFF
}R2H_AD_CHANNEL_LOGGING_HOLD_STATUS_T;

typedef enum R2H_AD_CHANNEL_LOGGING_HOLD_REQUEST
{
	R2H_AD_CHANNEL_LOGGING_HOLD_CMD_OFF				= 0,
	R2H_AD_CHANNEL_LOGGING_HOLD_CMD_ON				= 1,
	
	__R2H_AD_CHANNEL_LOGGING_HOLD_REQUEST			= 0xFFFFFFFF
}R2H_AD_CHANNEL_LOGGING_HOLD_REQUEST_T;


typedef enum R2H_AD_CHANNEL_SIGNAL_RANGE
{
	R2H_AD_CHANNEL_ANALOG_IN_4_20_MA 			= 0x0,
	R2H_AD_CHANNEL_ANALOG_IN_0_20_MA 			= 0x1,
	R2H_AD_CHANNEL_ANALOG_IN_1_5_V 				= 0x2,
	R2H_AD_CHANNEL_ANALOG_IN_0_5_V 				= 0x3,
	R2H_AD_CHANNEL_ANALOG_IN_10_10_V 			= 0x4,
	R2H_AD_CHANNEL_ANALOG_IN_0_10_V 			= 0x5,
	R2H_AD_CHANNEL_ANALOG_IN_4_20_MA_EXT 		= 0xA,
	R2H_AD_CHANNEL_ANALOG_IN_1_5_V_EXT 			= 0xB,
	R2H_AD_CHANNEL_ANALOG_IN_USER_RANGE 		= 0xF,
	
	__R2H_AD_CHANNEL_SIGNAL_RANGE				= 0xFFFFFFFF
}R2H_AD_CHANNEL_SIGNAL_RANGE_T;

typedef union R2H_AD_DEVICE_CHANNEL_ENABLE_MASK
{
	struct
	{
		R2H_UINT8	enable_channel_0 : 1;
		R2H_UINT8	enable_channel_1 : 1;
		R2H_UINT8	enable_channel_2 : 1;
		R2H_UINT8	enable_channel_3 : 1;
		R2H_UINT8	enable_channel_4 : 1;
		R2H_UINT8	enable_channel_5 : 1;
		R2H_UINT8	enable_channel_6 : 1;
		R2H_UINT8	enable_channel_7 : 1;
	};
	R2H_UINT8 enable_mask_value;
}R2H_AD_DEVICE_CHANNEL_ENABLE_MASK_T;


typedef enum R2H_AD_CHANNEL_AVERAGE_METHOD
{
	R2H_AD_CHANNEL_SAMPLING_PROCESSING					= 0,
	R2H_AD_CHANNEL_TIME_AVERAGING_PROCESSING				= 1,
	R2H_AD_CHANNEL_COUNT_AVERAGING_PROCESSING			= 2,
	R2H_AD_CHANNEL_MOVING_AVERAGING_PROCESSING			= 3,
	R2H_AD_CHANNEL_PRIMARY_DELAY_FLITER					= 4,
	
	__R2H_AD_CHANNEL_AVERAGE_METHOD						= 0xFFFFFFFF
}R2H_AD_CHANNEL_AVERAGE_METHOD_T;


#define R2H_AD_TIME_AVERAGE_DATA_MIN			(2)
#define R2H_AD_TIME_AVERAGE_DATA_MAX			(5000)
#define R2H_AD_COUNT_AVERAGE_DATA_MIN			(4)
#define R2H_AD_COUNT_AVERAGE_DATA_MAX			(62500)
#define R2H_AD_MOVING_AVERAGE_DATA_MIN			(2)
#define R2H_AD_MOVING_AVERAGE_DATA_MAX			(1000)
#define R2H_AD_FILTER_AVERAGE_DATA_MIN			(1)
#define R2H_AD_FILTER_AVERAGE_DATA_MAX			(500)
typedef union R2H_AD_CHANNEL_AVERAGE_METHOD_RELATED_DATA
{
	R2H_UINT16		time_average;//2-5000ms
	R2H_UINT16		count_average;//4-62500times
	R2H_UINT16		moving_average;//2-1000times
	R2H_UINT16		primary_delay_fliter;//1-500times
	R2H_UINT16		average_constant;
}R2H_AD_CHANNEL_AVERAGE_METHOD_RELATED_DATA_T;

typedef struct R2H_AD_CHANNEL_CONV_METHOD_SETTING
{
	R2H_AD_CHANNEL_AVERAGE_METHOD_T					average_method;
	R2H_AD_CHANNEL_AVERAGE_METHOD_RELATED_DATA_T	data;
}R2H_AD_CHANNEL_CONV_METHOD_SETTING_T;

typedef struct R2H_AD_CHANNEL_CLIPPING_SETTING
{
	R2H_AD_CHANNEL_FUNCTION_SWITCH_T		clipping_enable;
}R2H_AD_CHANNEL_CLIPPING_SETTING_T;

#define R2H_AD_SCALE_UPPER_LIMIT						(+32000)
#define R2H_AD_SCALE_LOWER_LIMIT						(-32000)
/*
 * Set the scaling with the condition "Scaling upper limit value ¡Ù Scaling lower limit value".
 */
typedef struct R2H_AD_CHANNEL_SCALE_SETTING
{
	R2H_AD_CHANNEL_FUNCTION_SWITCH_T	scale_enable;
	R2H_INT16							upper_scale;
	R2H_INT16							lower_scale;
}R2H_AD_CHANNEL_SCALE_SETTING_T;


#define R2H_AD_RATE_ALARM_DETECTION_CYCLE_MIN	(1)
#define R2H_AD_RATE_ALARM_DETECTION_CYCLE_MAX	(32000)
typedef struct R2H_AD_CHANNEL_ALARM_SETTING
{
	/*
	 * Set values within the range satisfying the condition 
	 * "Process alarm upper upper limit value ¡Ý Process alarm upper lower limit value ¡Ý Process alarm lower upper limit value ¡Ý Process alarm lower lower limit value". 
	 * If a value out of the range is set, a process alarm upper lower limit value setting range error (error code: 1BH) occurs.
	 */
	struct
	{
		R2H_AD_CHANNEL_FUNCTION_SWITCH_T	alarm_enable;
		R2H_INT16							alarm_upper_upper_limit;
		R2H_INT16							alarm_upper_lower_limit;
		R2H_INT16							alarm_lower_upper_limit;
		R2H_INT16							alarm_lower_lower_limit;
	}process_alarm_setting;
	/*
	 * Set values within the range satisfying the condition "Rate alarm upper limit value > Rate alarm lower limit value".
	 * If a value out of the range is set, a rate alarm upper/lower limit setting value inversion error (error code: 1BAH) occurs.
	 */
	struct
	{
		R2H_AD_CHANNEL_FUNCTION_SWITCH_T	alarm_enable;
		/*
		 * The rate alarm alert detection cycle is the value calculated by multiplying the set value by the conversion cycle.
		 */
		R2H_INT16							alarm_detection_cycle_in_times;//1-32000times In the channel where a value out of the range is set, a rate alarm alert detection cycle setting range error (error code: 1B9H) occurs.
		R2H_INT16							alarm_upper_limit;
		R2H_INT16							alarm_lower_limit;
	}rate_alarm_setting;
}R2H_AD_CHANNEL_ALARM_SETTING_T;

typedef enum R2H_AD_CHANNEL_SIGNAL_ERROR_DETECTION_METHOD
{
	R2H_AD_CHANNEL_DISABLE_SIGNAL_ERROR_DETECTION 						= 0,
	R2H_AD_CHANNEL_UPPER_LOWER_LIMIT_DETECTION							= 1,
	R2H_AD_CHANNEL_LOWER_LIMIT_DETECTION								= 2,
	R2H_AD_CHANNEL_UPPER_LIMIT_DETECTION								= 3,
	R2H_AD_CHANNEL_DISCONNECTION_DETECTION								= 4,//Used with extended mode
	
	__R2H_AD_CHANNEL_SIGNAL_ERROR_DETECTION_METHOD						= 0xFFFFFFFF
}R2H_AD_CHANNEL_SIGNAL_ERROR_DETECTION_METHOD_T;

#define R2H_AD_SIGNAL_ERROR_DETECTION_UP_LIMIT						(250)
#define R2H_AD_SIGNAL_ERROR_DETECTION_DOWN_LIMIT					(0)
typedef struct R2H_AD_CHANNEL_SIGNAL_ERROR_SETTING
{
	R2H_AD_CHANNEL_SIGNAL_ERROR_DETECTION_METHOD_T		signal_error_detection_method;
	//0.0-25.0% by 1(0.1%)
	R2H_INT16											error_value;
}R2H_AD_CHANNEL_SIGNAL_ERROR_SETTING_T;

typedef enum R2H_AD_CHANNEL_LOGGING_LEVEL_TRIGGER_CONDITION
{
	R2H_AD_CHANNEL_LOGGING_LEVEL_TRIGGER_DISABLE			= 0,
	R2H_AD_CHANNEL_LOGGING_LEVEL_TRIGGER_RISE				= 1,
	R2H_AD_CHANNEL_LOGGING_LEVEL_TRIGGER_FULL				= 2,
	R2H_AD_CHANNEL_LOGGING_LEVEL_TRIGGER_ANY				= 3,
	
	__R2H_AD_CHANNEL_LOGGING_LEVEL_TRIGGER_CONDITION		= 0xFFFFFFFF
}R2H_AD_CHANNEL_LOGGING_LEVEL_TRIGGER_CONDITION_T;

#define R2H_AD_LOGGING_POST_TRIGGER_POINTS_MAX				(10000)
#define R2H_AD_LOGGING_POST_TRIGGER_POINTS_MIN				(1)
#define R2H_AD_LOGGING_LEVEL_TRIGGER_DATA_POS_MIN			(0)
#define R2H_AD_LOGGING_LEVEL_TRIGGER_DATA_POS_MAX			(9999)

typedef struct R2H_AD_CHANNEL_LOGGING_HOLD_SETTING
{
	R2H_INT16											post_trigger_logging_points;
	R2H_AD_CHANNEL_LOGGING_LEVEL_TRIGGER_CONDITION_T	trigger_condition;
	R2H_INT16											level_trigger_data_pos;
	R2H_INT16											level_trigger_data_value;
}R2H_AD_CHANNEL_LOGGING_HOLD_SETTING_T;

#define R2H_AD_LOGGING_READ_MAX_POINTS						(10000)
#define R2H_AD_LOGGING_READ_MIN_POINT						(10)
typedef struct R2H_AD_CHANNEL_LOGGING_READ_FUNC
{
	R2H_AD_CHANNEL_FUNCTION_SWITCH_T					read_func_enable;
	R2H_INT16											read_points;
	//R2H_UINT16*											read_buff;
	//R2H_INT32											read_buff_size_in_word;
}R2H_AD_CHANNEL_LOGGING_READ_FUNC_T;

typedef enum R2H_AD_CHANNEL_LOGGING_TARGET
{
	R2H_AD_CHANNEL_LOGGING_OUTPUT_VALUE					= 0,
	R2H_AD_CHANNEL_LOGGING_OPERATION_VALUE				= 1,
	
	__R2H_AD_CHANNEL_LOGGING_TARGET						= 0xFFFFFFFF
}R2H_AD_CHANNEL_LOGGING_TARGET_T;

#define R2H_AD_LOGGING_CYCLE_MIN_US							(80)
#define R2H_AD_LOGGING_CYCLE_MAX_US							(32767)
#define R2H_AD_LOGGING_CYCLE_MIN_MS							(1)
#define R2H_AD_LOGGING_CYCLE_MAX_MS							(32767)
#define R2H_AD_LOGGING_CYCLE_MIN_S							(1)
#define R2H_AD_LOGGING_CYCLE_MAX_S							(3600)
typedef enum R2H_AD_CHANNEL_LOGGING_CYCLE_UNIT
{
	R2H_AD_CHANNEL_LOGGING_IN_US				= 0,
	R2H_AD_CHANNEL_LOGGING_IN_MS				= 1,
	R2H_AD_CHANNEL_LOGGING_IN_S				= 2,
	
	__R2H_AD_CHANNEL_LOGGING_CYCLE_UNIT		= 0xFFFFFFFF
}R2H_AD_CHANNEL_LOGGING_CYCLE_UNIT_T;

typedef struct R2H_AD_CHANNEL_LOGGING_FUNC_SETTING
{
	R2H_AD_CHANNEL_FUNCTION_SWITCH_T					logging_enable;	
	R2H_AD_CHANNEL_LOGGING_TARGET_T						logging_target;
	R2H_INT16											logging_cycle_value;
	R2H_AD_CHANNEL_LOGGING_CYCLE_UNIT_T					logging_cycle_unit;
	R2H_AD_CHANNEL_LOGGING_HOLD_SETTING_T				logging_hold_setting;
	R2H_AD_CHANNEL_LOGGING_READ_FUNC_T					logging_read_func_setting;
}R2H_AD_CHANNEL_LOGGING_FUNC_SETTING_T;


typedef struct R2H_AD_CHANNEL_STARTUP_PARAM
{
	R2H_AD_CHANNEL_SIGNAL_RANGE_T					range;
	R2H_AD_CHANNEL_CONV_METHOD_SETTING_T			conv_method_setting;
	R2H_AD_CHANNEL_CLIPPING_SETTING_T				clipping_setting;
	R2H_AD_CHANNEL_SCALE_SETTING_T					scale_setting;
	R2H_AD_CHANNEL_ALARM_SETTING_T					alarm_setting;
	R2H_AD_CHANNEL_SIGNAL_ERROR_SETTING_T			signal_error_setting;
	R2H_AD_CHANNEL_LOGGING_FUNC_SETTING_T			logging_func_setting;
}R2H_AD_CHANNEL_STARTUP_PARAM_T;





#define R2H_AD_ERROR_HISTORY_SLOTS_CNT					(16)
#define R2H_AD_ERROR_HISTORY_SLOT_SIZE_IN_WORD			(10)
typedef struct R2H_AD_DEVICE_ERROR_HISTORY_DETAIL
{
	R2H_UINT16					error_code;
	R2H_UINT16					year;
	R2H_BYTE					day;
	R2H_BYTE					month;
	R2H_BYTE					minute;
	R2H_BYTE					hour;
	R2H_BYTE					day_of_the_week;
	R2H_BYTE					second;
	R2H_UINT16					millisecond;
}R2H_AD_DEVICE_ERROR_HISTORY_DETAIL_T;


#define R2H_AD_ALARM_HISTORY_SLOTS_CNT					(16)
#define R2H_AD_ALARM_HISTORY_SLOT_SIZE_IN_WORD			(10)
typedef struct R2H_AD_DEVICE_ALARM_HISTORY_DETAIL
{
	R2H_UINT16					alarm_code;
	R2H_UINT16					year;
	R2H_BYTE					day;
	R2H_BYTE					month;
	R2H_BYTE					minute;
	R2H_BYTE					hour;
	R2H_BYTE					day_of_the_week;
	R2H_BYTE					second;
	R2H_UINT16					millisecond;
}R2H_AD_DEVICE_ALARM_HISTORY_DETAIL_T;

#pragma pack()


#endif /* R2H_EXTMODULE_ANALOG_IN_DEVICE_DEF_H_ */
